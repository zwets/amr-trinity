configfile: 'config/config.yaml'

import pandas as pd
import re
# already default: shell.executable("bash")
# already default: shell.prefix("set -euo pipefail;")
# already set?: shell.prefix("IFS=$'\n\t')  # Space excluded?

# Samples Table ---

# Read the samples TSV verbatim into an all-strings dataframe
# - Empty lines and comment lines are skipped
# - Empty cells yield zero-length strings (no NaN or NA weirdness)
# - Lenienty skip spaces that start a cell value
# - Index column 'biosample' must be unique (checked below)
# - Param 'usecols' lists our required columns (others are ignored)

samples = pd.read_table(config['samples'], index_col="id",
    dtype='str', na_filter=False, comment='#', skipinitialspace=True,
    usecols=['id', 'species', 'assembly'])

# Sanity checks on samples table

if not all(map(len, samples.index)) or samples.index.size != samples.index.unique().size:
    raise Exception("Every sample must have a unique id in {}".format(config['samples']))

if not all(map(len, samples.assembly)):
    raise Exception("Every sample must have an assembly file name in {}".format(config['samples']))

pat = re.compile(r"^[\w.@:=-]+$")
if not all(map(lambda id: re.match(pat, id), samples.index)):
    raise Exception("Sample IDs must not contain spaces or punctuation other than: . @ : = - _")

# Input Helpers ---

# Functions to retrieve column values from the samples table for w.sample
# - All these use the {sample} variable in the implicit wildcards param
# - All return empty string iff the value is absent hence can act as boolean

sample_ids = samples.index
get_species = lambda w: samples.loc[w.sample].species
get_assembly = lambda w: samples.loc[w.sample].assembly

# Target rules ---

rule all:
    default_target: True
    input:
        "results/report.tsv",
        "results/report.json",
        "results/report.html"

rule summarize_all:
    output:
        tsv = "results/report.tsv",
        json = "results/report.json",
        html = "results/report.html"
    input:
        expand("results/{sample}/{sample}_hamronized.tsv", sample=sample_ids),
    conda:
        "envs/hamronization.yaml"
    shell:
        """
        hamronize summarize -t tsv -o {output.tsv} {input}
        hamronize summarize -t json -o {output.json} {input}
        hamronize summarize -t interactive -o {output.html} {input}
        """

rule summarize_sample:
    output:
        tsv = "results/{sample}/{sample}_hamronized.tsv",
        json = "results/{sample}/{sample}_hamronized.json",
        html = "results/{sample}/{sample}_hamronized.html"
    input:
        expand("results/{sample}/amrfinderplus/hamronized_report.tsv", sample=sample_ids),
        expand("results/{sample}/resfinder/hamronized_report.tsv", sample=sample_ids),
        expand("results/{sample}/rgi/hamronized_report.tsv", sample=sample_ids),
    conda:
        "envs/hamronization.yaml"
    shell:
        """
        hamronize summarize -t tsv -o {output.tsv} {input}
        hamronize summarize -t json -o {output.json} {input}
        hamronize summarize -t interactive -o {output.html} {input}
        """

include: "rules/amrfinderplus.smk"
include: "rules/resfinder.smk"
include: "rules/rgi.smk"

